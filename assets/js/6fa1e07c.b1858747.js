"use strict";(self.webpackChunkdocs_common=self.webpackChunkdocs_common||[]).push([[6212],{3795:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>m,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"guides/docs-common/docs-and-commenting-rules","title":"Docs vs Code Comments","description":"Purpose","source":"@site/docs/guides/docs-common/docs-and-commenting-rules.md","sourceDirName":"guides/docs-common","slug":"/guides/docs-common/docs-and-commenting-rules","permalink":"/docs-common/docs/guides/docs-common/docs-and-commenting-rules","draft":false,"unlisted":false,"editUrl":"https://github.com/MohammadAObed/docs-common/tree/main/docs/guides/docs-common/docs-and-commenting-rules.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Docs Publishing","permalink":"/docs-common/docs/guides/docs-common/docs-publishing"},"next":{"title":"Docs Reading","permalink":"/docs-common/docs/guides/docs-common/docs-reading"}}');var i=o(4848),c=o(8453);const t={sidebar_position:5},d="Docs vs Code Comments",r={},l=[{value:"Purpose",id:"purpose",level:2},{value:"What goes in Docs",id:"what-goes-in-docs",level:2},{value:"What goes in Code Comments (TSDoc/JSDoc)",id:"what-goes-in-code-comments-tsdocjsdoc",level:2},{value:"Rules of Thumb",id:"rules-of-thumb",level:2},{value:"Hygiene &amp; Tooling",id:"hygiene--tooling",level:2}];function a(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"docs-vs-code-comments",children:"Docs vs Code Comments"})}),"\n",(0,i.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Keep our code clean, our docs useful, and both in sync."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"what-goes-in-docs",children:"What goes in Docs"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\ud83d\udca1 Docs DON\u2019T explain line-by-line code."}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Project intro, goals, and scope."}),"\n",(0,i.jsx)(n.li,{children:"Installation & setup (tooling, commands, CI)."}),"\n",(0,i.jsx)(n.li,{children:"Folder & file purpose (architecture decisions)."}),"\n",(0,i.jsx)(n.li,{children:"Workflows & conventions (naming, imports, tsconfig patterns)."}),"\n",(0,i.jsx)(n.li,{children:"Usage guides for consumers (how to use features)."}),"\n",(0,i.jsx)(n.li,{children:"Changelogs, migration notes, breaking changes."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"what-goes-in-code-comments-tsdocjsdoc",children:"What goes in Code Comments (TSDoc/JSDoc)"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\ud83d\udca1 To explain line-by-line code."}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Public API surface (exports): purpose, params, returns, edge cases."}),"\n",(0,i.jsx)(n.li,{children:"\u201cWhy\u201d something exists (non-obvious intent, constraints)."}),"\n",(0,i.jsx)(n.li,{children:"Gotchas: perf, side effects, security, compatibility."}),"\n",(0,i.jsx)(n.li,{children:"Link back to deeper docs when needed."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Comments DON\u2019T restate obvious code or duplicate docs."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'/**\n * Converts px to rem using the provided base (default 16).\n * Returns a string like "1.25rem". Avoid for non-scaling UI tokens.\n * @param px - Pixel value to convert.\n * @param base - Root font size.\n */\nexport function pxToRem(px: number, base = 16): string {\n  return `${px / base}rem`;\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"rules-of-thumb",children:"Rules of Thumb"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Public exports: Always comment (TSDoc)."}),"\n",(0,i.jsx)(n.li,{children:"Private helpers: Comment only if non-obvious."}),"\n",(0,i.jsx)(n.li,{children:"Keep it short: 1\u20133 lines for most items."}),"\n",(0,i.jsx)(n.li,{children:"Explain \u201cwhy\u201d, not \u201chow\u201d."}),"\n",(0,i.jsx)(n.li,{children:"Prefer self-descriptive names over comments."}),"\n",(0,i.jsx)(n.li,{children:"No duplication: Link from comments \u2192 docs (and vice versa) instead of repeating."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"hygiene--tooling",children:"Hygiene & Tooling"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use TSDoc syntax so hover + TypeDoc work."}),"\n",(0,i.jsx)(n.li,{children:"Keep comments updated when code changes."}),"\n",(0,i.jsx)(n.li,{children:"PR checklist must include: \u201cUpdated comments/docs?\u201d"}),"\n",(0,i.jsx)(n.li,{children:"Run linters & type checks locally before commit."}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>d});var s=o(6540);const i={},c=s.createContext(i);function t(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);